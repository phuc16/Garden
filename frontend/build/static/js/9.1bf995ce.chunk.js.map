{"version":3,"sources":["app/prediction/Prediction.js"],"names":["Temperature","props","data","labels","datasets","label","backgroundColor","borderColor","borderWidth","fill","options","scales","yAxes","ticks","beginAtZero","legend","display","elements","point","radius","state","allTemp","todayTemp","lastData","predictSetting","reload","predictData","axios","get","process","then","res","temp","setState","predictDataChart","predictColumn","i","this","length","push","slice","replace","console","log","showChart","handleTimeStart","e","index","parseInt","target","className","value","predictInsetting","handleTimeEnd","handleTimeGap","handleHour","hour","handlePredict","device_id","timeStart","timeEnd","timeGap","endDay","startDay","startHour","endHour","post","id_device","result","alert","time_start","type","onChange","step","time_end","time_gap","setting","onClick","defaultValue","keyField","columns","dataField","text","defaultActiveKey","id","eventKey","title","bootstrap4","sort","pagination","paginationFactory","sizePerPage","Component"],"mappings":"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","file":"static/js/9.1bf995ce.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { CircularProgressbarWithChildren } from 'react-circular-progressbar';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { Tabs, Tab, Button } from 'react-bootstrap';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { Link } from 'react-router-dom';\r\nimport paginationFactory from 'react-bootstrap-table2-paginator';\r\nimport axios from 'axios';\r\nimport './prediction.css'\r\nclass Temperature extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      allTemp: [],\r\n      todayTemp : [],\r\n      lastData: 0,\r\n      predictSetting: [],\r\n      reload: false,\r\n      predictData: []\r\n    };\r\n  }\r\n\r\n\r\n  async componentDidMount(){\r\n    // var today = new Date();\r\n    // var date = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+today.getDate();\r\n    // var nextDate = today.getFullYear()+'-'+(today.getMonth()+1)+'-'+(today.getDate() + 1);\r\n    // // console.log(nextDate)\r\n\r\n    // await axios.get(process.env.REACT_APP_SERVER + `/data`)\r\n    // .then(res => {\r\n    //   let temp = []\r\n    //   for (let i = 0; i<res.data.length; i++){\r\n    //     if (res.data[i]['category'] == 'Temp'){\r\n    //       temp.push(res.data[i])\r\n    //     }\r\n    //   }\r\n    //   this.setState({allTemp: temp})\r\n    // })\r\n    // console.log('x')\r\n\r\n    // await axios.get(process.env.REACT_APP_SERVER + `/data/last`)\r\n    // .then(res => {\r\n    //   var x = 0\r\n    //   for (let i = 0; i < res.data.length; i++){\r\n    //     if (res.data[i]['category'] == 'Temp'){\r\n    //       x = res.data[i]['value']\r\n    //     }\r\n    //   }\r\n    //   console.log(x)\r\n    //   this.setState({lastData: x})\r\n    // })\r\n\r\n    // await axios.get(process.env.REACT_APP_SERVER + `/data/search?idGarden=1&startDay=${date}&endDay=${nextDate}`)\r\n    // .then(res => {\r\n    //   let temp = []\r\n    //   for (let i = 0; i<res.data.length; i++){\r\n    //     if (res.data[i]['category'] == 'Temp'){\r\n    //      temp.push(res.data[i])\r\n    //     }\r\n    //   }\r\n    //   this.setState({todayTemp: temp})\r\n    // })\r\n\r\n    // await axios.get(process.env.REACT_APP_SERVER +  `/data/before-last`)\r\n    // .then(res => {\r\n    //   let x = res.data\r\n    //   this.setState({nearestData: x['Temp']})\r\n    // })\r\n\r\n    // axios.get(process.env.REACT_APP_SERVER + `/schedule?startDay=2000-01-01&endDay=2023-01-01`)\r\n    // .then(res => {\r\n    //     const temp = res.data; \r\n    //     this.setState({ scheduled : temp });\r\n    //     console.log(this.state.scheduled)\r\n    // })\r\n\r\n    axios.get(process.env.REACT_APP_SERVER + `/device`)\r\n    .then(res => {\r\n        const temp = res.data; \r\n        this.setState({ predictSetting : temp });\r\n    })\r\n\r\n    // axios.post(process.env.REACT_APP_SERVER + `/predict?startTime=2020-10-14%208:00&endTime=2020-10-14%2013:00&timeGap=15`, {\r\n    //   id_device: 15\r\n    // })\r\n    // .then(res => {\r\n    //   let temp = res.data.result\r\n    //   for (let i = 0; i < temp.length; i++){\r\n    //     temp[i][\"date\"] = temp[i][\"date\"].replace('2020', 2022)\r\n    //   }\r\n    //   this.setState({predictData: temp})\r\n    // })\r\n  }\r\n\r\n  data = {\r\n    labels: [],\r\n    datasets: [{\r\n      label: 'Predict Temperature',\r\n      data: [],\r\n      backgroundColor: [\r\n        'rgba(255, 99, 132, 0.2)',\r\n        'rgba(54, 162, 235, 0.2)',\r\n        'rgba(255, 206, 86, 0.2)',\r\n        'rgba(75, 192, 192, 0.2)',\r\n        'rgba(153, 102, 255, 0.2)',\r\n        'rgba(255, 159, 64, 0.2)'\r\n      ],\r\n      borderColor: [\r\n        'rgba(255,99,132,1)',\r\n        'rgba(54, 162, 235, 1)',\r\n        'rgba(255, 206, 86, 1)',\r\n        'rgba(75, 192, 192, 1)',\r\n        'rgba(153, 102, 255, 1)',\r\n        'rgba(255, 159, 64, 1)'\r\n      ],\r\n      borderWidth: 1,\r\n      fill: true\r\n    }]\r\n  };\r\n\r\n  options = {\r\n      scales: {\r\n        yAxes: [{\r\n          ticks: {\r\n            beginAtZero: true\r\n          }\r\n        }]\r\n      },\r\n      legend: {\r\n        display: true\r\n      },\r\n      elements: {\r\n        point: {\r\n          radius: 0\r\n        }\r\n      }\r\n\r\n  };\r\n\r\n  showChart(){\r\n    var predictDataChart = []\r\n    var predictColumn = []\r\n\r\n    \r\n    for (let i = 0; i< this.state.predictData.length; i++){\r\n      predictDataChart.push(this.state.predictData[i]['tempPredict'])\r\n      predictColumn.push(this.state.predictData[i]['date'].slice(0, 16).replace('2020', '2022'))\r\n    }\r\n\r\n    this.data.labels = predictColumn\r\n    this.data.datasets[0].data = predictDataChart\r\n    console.log(predictColumn)\r\n  }\r\n\r\n  render () {\r\n    console.log('render')\r\n    this.showChart()\r\n\r\n\r\n    const StatColumn = [\r\n      {\r\n      dataField: 'date',\r\n      text: 'Time',\r\n      sort: true\r\n      }, {\r\n      dataField: 'tempPredict',\r\n      text: 'Value',\r\n      sort: true\r\n    }\r\n    ]\r\n\r\n    const columns2 = [{\r\n        dataField: 'id',\r\n        text: 'ID'\r\n      }, \r\n      {\r\n        dataField: 'name',\r\n        text: 'Device Name'\r\n      },\r\n      {\r\n        dataField: 'time_start',\r\n        text: 'Time Start'\r\n      },\r\n      {\r\n        dataField: 'time_end',\r\n        text: 'Time End'\r\n      },\r\n      {\r\n        dataField: 'time_gap',\r\n        text: 'Time Gap',\r\n      },\r\n      {\r\n        dataField: 'setting',\r\n        text: 'Setting'\r\n      }\r\n    ];\r\n\r\n    const handleTimeStart = e => {\r\n        let index = parseInt(e.target.className)\r\n        console.log((e.target.value))\r\n        predictInsetting[index]['time_start'] = e.target.value\r\n      }\r\n\r\n      const handleTimeEnd = e => {\r\n        let index = parseInt(e.target.className)\r\n        predictInsetting[index]['time_end'] = e.target.value\r\n      }\r\n\r\n      const handleTimeGap = e => {\r\n        let index = parseInt(e.target.className)\r\n        predictInsetting[index]['time_gap'] = e.target.value\r\n      }\r\n\r\n      const handleHour = (hour) => {\r\n        console.log(hour)\r\n        if (hour[0] == 0) return hour.slice(1,6)\r\n        else return hour\r\n      }\r\n      const handlePredict = (e) => {\r\n        let index = e.target.value\r\n        console.log(predictInsetting[index]['time_end'])\r\n        let device_id = predictInsetting[index]['id']\r\n        let timeStart = predictInsetting[index]['time_start']\r\n        let timeEnd = predictInsetting[index]['time_end']\r\n        let timeGap = predictInsetting[index]['time_gap']\r\n        let endDay = timeEnd.slice(0,10)\r\n        let startDay = timeStart.slice(0,10)\r\n        let startHour = handleHour(timeStart.slice(11,16))\r\n        let endHour = handleHour(timeEnd.slice(11,16))\r\n\r\n        timeStart = startDay + ' ' + startHour\r\n        timeEnd = endDay + ' ' + endHour\r\n        if (timeGap != 15){\r\n            axios.post(process.env.REACT_APP_SERVER + `/predict?startTime=${timeStart}&endTime=${timeEnd}&timeGap=15`, {\r\n              id_device: device_id\r\n            })\r\n            .then(res => {\r\n              let temp = res.data.result\r\n              for (let i = 0; i < temp.length; i++){\r\n                temp[i][\"date\"] = temp[i][\"date\"].replace('2020', 2022)\r\n              }\r\n              alert(`${temp.length} new schedules updated! Check Schedule now`)\r\n              this.setState({predictData: temp})\r\n\r\n            })\r\n        }\r\n        else {\r\n            axios.post(process.env.REACT_APP_SERVER + `/predict?startTime=${timeStart}&endTime=${timeEnd}`, {\r\n              id_device: device_id\r\n            })\r\n            .then(res => {\r\n              let temp = res.data.result\r\n              for (let i = 0; i < temp.length; i++){\r\n                temp[i][\"date\"] = temp[i][\"date\"].replace('2020', 2022)\r\n              }\r\n              this.setState({predictData: temp})\r\n            })\r\n        }       \r\n      }\r\n    \r\n    const predictInsetting = []\r\n\r\n    for (let i = 0; i < this.state.predictSetting.length ; i++){\r\n        predictInsetting.push({...this.state.predictSetting[i], \r\n        time_start: <input type=\"datetime-local\" onChange={handleTimeStart} className={i} step={1}></input>, \r\n        time_end: <input type=\"datetime-local\" onChange={handleTimeEnd}  className={i} step={1} ></input>,\r\n        time_gap:  <input type=\"number\" onChange={handleTimeGap}  className={i}></input>,\r\n        setting:  <Button value={i} onClick={handlePredict} defaultValue={15}>Predict</Button> }) \r\n    }\r\n    console.log(this.state.predictData)\r\n    return (\r\n      <div>\r\n        <div className=\"page-header\">\r\n          <h3 className=\"page-title\">\r\n            Temperature Prediction (Be awareness! predict temperature feature allows the system schedule the sensor automatically.)\r\n          </h3>\r\n        </div>\r\n        <div className=\"row\"> \r\n            <div className=\"col-xl-12 col-lg-12 col-sm-12 grid-margin stretch-card\">\r\n                <div className=\"card\">\r\n                    <div className=\"card-body text-center\">\r\n                    <div className=\"card predict\">\r\n                            <div className=\"card-body text-center\">\r\n                            <h5 className=\"mb-2 text-dark font-weight-normal \">Predict Setting</h5>\r\n                                <BootstrapTable keyField='id' data={ predictInsetting } columns={ columns2 } />\r\n                                </div>\r\n                            </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div className='row'>\r\n        <div className=\"col-md-12\">\r\n              <div className=\"justify-content-between align-items-center tab-transparent\">\r\n        <Tabs defaultActiveKey=\"chart\" id=\"uncontrolled-tab-example\" className=\"mb-3\">\r\n          <Tab eventKey=\"chart\" title=\"Chart\">\r\n          <div className=\"card\">\r\n                <div className=\"card-body\">\r\n                    <h4 className=\"card-title\">Temperature Chart</h4>\r\n                    <Line data={this.data} options={this.options} />\r\n                </div>\r\n            </div>\r\n          </Tab>\r\n          <Tab eventKey=\"today\" title=\"Today\">\r\n          <div className=\"card\">\r\n          <div className=\"card-body text-center\">\r\n          <h5 className=\"mb-2 text-dark font-weight-normal\">Temperature Stats Today</h5>\r\n            <BootstrapTable bootstrap4 keyField='id' data={ this.state.predictData } columns={ StatColumn }  pagination={paginationFactory({ sizePerPage: 5 })}/>\r\n            </div>\r\n          </div>\r\n\r\n          </Tab>\r\n        </Tabs>\r\n        </div>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Temperature;"],"sourceRoot":""}